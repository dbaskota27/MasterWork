import openai
import pandas as pd
import requests
import subprocess
from gtts import gTTS
import os
import json
import re
import textwrap
from moviepy.editor import concatenate_videoclips, ImageClip, AudioFileClip  

api_key = "use your own"
PEXELS_API_KEY = "use your own"
api_key


import openai
import requests
from gtts import gTTS
from moviepy.editor import ImageClip, concatenate_videoclips, AudioFileClip
from moviepy.config import change_settings
import random
import os
import warnings

# Suppress MoviePy warnings for cleaner output
warnings.filterwarnings("ignore", category=UserWarning, module="moviepy")

# === CONFIG ===
# Configure ImageMagick
IMAGEMAGICK_BINARY = r"C:\Program Files\ImageMagick-7.1.1-Q16-HDRI\magick.exe"
change_settings({"IMAGEMAGICK_BINARY": IMAGEMAGICK_BINARY})

# Configure OpenAI API key
openai.api_key = api_key  # Replace with your actual OpenAI API key
OUTPUT_DIR = "outputs"
os.makedirs(OUTPUT_DIR, exist_ok=True)
VIDEO_RESOLUTION = (1920, 1080)  # Target video resolution
IMAGE_SIZE = "1024x1024"  # Supported DALL-E size
TARGET_DURATION = 60  # Target narration duration in seconds

# === STEP 1: Define Trending Fantasy Topics ===
# Five fantasy topics inspired by market trends
trending_fantasy_topics = [
    "Wizards mastering artificial intelligence in enchanted towers",
    "Elves crafting sustainable magic in eco-friendly forests",
    "Dragons trading cryptocurrency in fiery marketplaces",
    "Mythical creatures adapting to remote work in mystical realms",
    "Sorcerers innovating with blockchain spells in ancient kingdoms"
]

# Select a random topic for the story
selected_topic = random.choice(trending_fantasy_topics)
print(f"Selected fantasy topic: {selected_topic}")

# === STEP 2: Generate Story with Scenes and Narration ===
def generate_fantasy_story(topic):
    """Generate a fantasy story with 5 scenes and a 60-second narration."""
    prompt = (
        f"Write a fantasy story inspired by the market trend in '{topic}'. "
        "The story should immerse viewers in a vivid, magical world. "
        "Provide the output in the following format:\n"
        "Scene 1: [One-sentence description of the first scene].\n"
        "Scene 2: [One-sentence description of the second scene].\n"
        "Scene 3: [One-sentence description of the third scene].\n"
        "Scene 4: [One-sentence description of the fourth scene].\n"
        "Scene 5: [One-sentence description of the fifth scene].\n"
        "Narration: [A 60-second narration, approximately 150-200 words, connecting these scenes with a clear storytelling arc (Hook ‚Üí Tension ‚Üí Insight ‚Üí Payoff)]."
    )
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ],
            max_tokens=400,
            temperature=0.7
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        print(f"‚ùå Error generating story: {e}")
        return None

# Generate and parse the story
story_text = generate_fantasy_story(selected_topic)
if not story_text:
    print("‚ùå Failed to generate story. Exiting.")
    exit(1)

# Parse scenes and narration
scenes = []
narration = ""
for line in story_text.split("\n"):
    if line.startswith("Scene "):
        scenes.append(line.split(":", 1)[1].strip())
    elif line.startswith("Narration:"):
        narration = line.split(":", 1)[1].strip()
        break

if len(scenes) != 5 or not narration:
    print("‚ùå Invalid story format. Expected 5 scenes and narration.")
    exit(1)

print(f"Generated scenes: {scenes}")
print(f"Narration: {narration}")

# === STEP 3: Generate Images ===
def generate_image(prompt, output_path):
    """Generate an image using OpenAI's DALL-E."""
    try:
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size=IMAGE_SIZE
        )
        image_url = response['data'][0]['url']
        image_data = requests.get(image_url).content
        with open(output_path, "wb") as f:
            f.write(image_data)
        if os.path.getsize(output_path) > 0:
            print(f"‚úÖ Image generated: {output_path}")
            return output_path
        else:
            print(f"‚ö†Ô∏è Image file is empty: {output_path}")
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è Image generation failed: {e}")
        return None

# Generate images for each scene
images = []
valid_images = []
for i, scene in enumerate(scenes):
    image_prompt = f"A realistic, high-quality image of {scene} in a fantasy setting, vibrant colors, cinematic lighting"
    image_path = os.path.join(OUTPUT_DIR, f"image_{i+1}.jpg")
    result = generate_image(image_prompt, image_path)
    images.append(image_path)
    if result:
        valid_images.append(image_path)
    print(f"Image prompt {i+1}: {image_prompt}")
    print(f"Image path {i+1}: {image_path}")

# Check if we have valid images
if not valid_images:
    print("‚ùå No valid images generated. Please provide images in outputs/image_1.jpg, etc.")
    exit(1)

# === STEP 4: Generate Audio Narration ===
def generate_audio(text, filename):
    """Generate audio from text using gTTS."""
    try:
        tts = gTTS(text=text, lang='en')
        tts.save(filename)
        print(f"‚úÖ Audio generated: {filename}")
        return filename
    except Exception as e:
        print(f"‚ùå Error generating audio: {e}")
        return None

audio_path = os.path.join(OUTPUT_DIR, "narration.mp3")
audio_path = generate_audio(narration, audio_path)
if not audio_path or not os.path.exists(audio_path):
    print("‚ùå Failed to generate audio. Please ensure gTTS is installed and working.")
    exit(1)

# === STEP 5: Create Narrated Video ===
def create_video(image_paths, audio_path, output_path):
    """Combine images and audio into a narrated video."""
    try:
        # Load audio
        audio = AudioFileClip(audio_path)
        duration = max(audio.duration, TARGET_DURATION)  # Ensure at least 60 seconds
        print(f"üîä Audio duration: {duration:.2f} seconds")

        # Calculate duration per image
        num_images = len(image_paths)
        duration_per_image = duration / num_images
        print(f"üñºÔ∏è {num_images} images, each displayed for {duration_per_image:.2f} seconds")

        # Create video clips
        clips = []
        for img in image_paths:
            if not os.path.exists(img) or os.path.getsize(img) == 0:
                print(f"‚ö†Ô∏è Invalid or missing image: {img}. Skipping.")
                continue
            clip = ImageClip(img).set_duration(duration_per_image).resize(newsize=VIDEO_RESOLUTION)
            clips.append(clip)

        if not clips:
            print("‚ùå No valid images to create video.")
            audio.close()
            return None

        # Concatenate clips
        video = concatenate_videoclips(clips, method="compose")
        video = video.set_audio(audio)

        # Export video
        temp_audiofile = os.path.join(OUTPUT_DIR, "temp_audio.mp4")
        video.write_videofile(
            output_path,
            fps=24,
            codec="libx264",
            audio_codec="aac",
            temp_audiofile=temp_audiofile
        )
        print(f"‚úÖ Video created: {output_path}")

        # Clean up
        video.close()
        audio.close()
        for clip in clips:
            clip.close()
        if os.path.exists(temp_audiofile):
            os.remove(temp_audiofile)
        return output_path
    except Exception as e:
        print(f"‚ùå Error creating video: {e}")
        if 'audio' in locals():
            audio.close()
        return None

# Create video only if audio_path is valid
if audio_path:
    output_video = os.path.join(OUTPUT_DIR, "fantasy_video.mp4")
    create_video(valid_images, audio_path, output_video)
else:
    print("‚ùå Cannot create video without audio.")
    exit(1)

# === Final Message ===
if os.path.exists(output_video):
    print("üéâ Video generation complete! Check outputs/fantasy_video.mp4")
else:
    print("‚ö†Ô∏è Video generation failed. Check logs for details.")
