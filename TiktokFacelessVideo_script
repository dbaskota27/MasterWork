import os
import openai
import requests
import json
import pandas as pd
import random
import time
import asyncio
import edge_tts
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Lock
from gtts import gTTS
from moviepy.editor import concatenate_videoclips, AudioFileClip, VideoFileClip
from moviepy.video.fx import all as vfx
from moviepy.config import change_settings

# === CONFIGURATION ===
IMAGEMAGICK_BINARY = r"C:\\Program Files\\ImageMagick-7.1.1-Q16-HDRI\\magick.exe"
change_settings({"IMAGEMAGICK_BINARY": IMAGEMAGICK_BINARY})

    # Replace
TARGET_NICHE = "Dog habits"
OUTPUT_DIR = os.path.join("outputs", TARGET_NICHE)
os.makedirs(OUTPUT_DIR, exist_ok=True)

video_summaries = []
audio_lock = Lock()

EDGE_TTS_VOICES = [
    "en-US-GuyNeural",
    "en-US-JennyNeural",
    "en-GB-RyanNeural",
    "en-GB-SoniaNeural",
    "en-AU-NatashaNeural",
]

TARGET_SCENE_DURATION = 15  # seconds

# === HEALTH CHECK ===
def health_check():
    print("üîé Checking environment...")
    errors = []
    if not openai.api_key:
        errors.append("‚ùå OpenAI API key missing.")
    if not PEXELS_API_KEY:
        errors.append("‚ùå Pexels API key missing.")
    if not os.path.exists(IMAGEMAGICK_BINARY):
        errors.append("‚ùå ImageMagick binary not found.")
    if errors:
        for e in errors:
            print(e)
        raise EnvironmentError("Environment check failed.")
    print("‚úÖ Environment looks good.")

# === AUDIO GENERATION ===
async def generate_audio_async(text, filename, voice_choice):
    communicate = edge_tts.Communicate(text, voice=voice_choice, rate="+0%")
    await communicate.save(filename)

def generate_audio_block(text, filename):
    try:
        if not isinstance(text, str) or not text.strip():
            text = "Welcome."
        voice_choice = random.choice(EDGE_TTS_VOICES)
        asyncio.run(generate_audio_async(text, filename, voice_choice))
        print(f"‚úÖ Audio saved: {filename}")
        return filename
    except Exception:
        print(f"‚ö†Ô∏è Edge-TTS failed, using gTTS fallback...")
        try:
            tts = gTTS(text=text, lang='en', tld='com')
            tts.save(filename)
            print(f"‚úÖ Audio saved (gTTS fallback): {filename}")
            return filename
        except Exception as e:
            print(f"‚ùå gTTS fallback failed: {e}")
            return None

# === IDEA GENERATION ===
def generate_ideas_via_prompt():
    prompt = f"""
Generate 1 Instagram Reels ideas for the {TARGET_NICHE} niche.

Each idea must include:
- ID: integer
- Topic: catchy title
- Scene Prompts: 5 vivid, realistic visual descriptions (1 per scene)
- Text Prompt: 5 separate narrations (~50 words each) matching each scene
- Duration (s): ~75
- Title: scroll-stopping caption
- Tags: 5‚Äì7 trending hashtags

Return as a clean JSON array of 5 ideas.
"""
    print("üí¨ Generating ideas...")
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    ideas = json.loads(response.choices[0].message.content.strip())
    df = pd.DataFrame(ideas)
    df.to_excel(os.path.join(OUTPUT_DIR, "video_ideas.xlsx"), index=False)
    print("‚úÖ Ideas saved.")
    return df

# === DOWNLOAD STOCK VIDEOS ===
def download_stock_videos_for_scenes(scene_prompts, base_name):
    headers = {"Authorization": PEXELS_API_KEY}
    video_paths = []
    fallback_queries = ["nature", "city", "abstract"]

    for i, prompt in enumerate(scene_prompts):
        query = prompt.split('.')[0].strip()
        url = f"https://api.pexels.com/videos/search?query={query}&per_page=1&orientation=portrait"
        res = requests.get(url, headers=headers)
        try:
            data = res.json()
            video_url = data["videos"][0]["video_files"][0]["link"]
            video_data = requests.get(video_url).content
            video_path = os.path.join(f"{base_name}_scene_{i+1}.mp4")
            with open(video_path, "wb") as f:
                f.write(video_data)
            video_paths.append(video_path)
            print(f"‚úÖ Downloaded: {video_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è Video download failed: {e}")
            if video_paths:
                video_paths.append(video_paths[-1])
    return video_paths

# === CREATE VIDEO FROM BLOCKS ===
def create_video_from_blocks(video_paths, audio_paths, output_path):
    print("üé¨ Building final video...")
    try:
        standard_size = (1080, 1920)
        video_clips = []

        for clip_path, audio_path in zip(video_paths, audio_paths):
            video_clip = VideoFileClip(clip_path).resize(standard_size)
            audio_clip = AudioFileClip(audio_path)
            audio_duration = audio_clip.duration

            if video_clip.duration < audio_duration:
                slow_factor = video_clip.duration / audio_duration
                slowed_video = video_clip.fx(vfx.speedx, factor=slow_factor)
                final_clip = slowed_video.set_audio(audio_clip)
            else:
                final_clip = video_clip.subclip(0, audio_duration).set_audio(audio_clip)

            video_clips.append(final_clip)

        final_video = concatenate_videoclips(video_clips, method="compose")
        final_video.write_videofile(output_path, fps=24, codec='libx264', audio_codec='aac')

        final_video.close()
        for clip in video_clips:
            clip.close()
        print(f"‚úÖ Final video: {output_path}")
        return output_path
    except Exception as e:
        print(f"‚ùå Video creation failed: {e}")
        return None

# === PROCESS SINGLE VIDEO ===
def process_single_video(row):
    try:
        id = int(row["ID"])
        base = os.path.join(OUTPUT_DIR, f"video_{id}")
        audio_folder = os.path.join(OUTPUT_DIR, f"audio_blocks_{id}")
        os.makedirs(audio_folder, exist_ok=True)

        narration_blocks = row["Text Prompt"]
        if isinstance(narration_blocks, str):
            narration_blocks = json.loads(narration_blocks)

        audio_paths = []
        for idx, block in enumerate(narration_blocks):
            audio_path = os.path.join(audio_folder, f"block_{idx+1}.mp3")
            generate_audio_block(block, audio_path)
            audio_paths.append(audio_path)

        scene_prompts = row["Scene Prompts"]
        if isinstance(scene_prompts, str):
            scene_prompts = json.loads(scene_prompts)

        video_segments = download_stock_videos_for_scenes(scene_prompts, base)
        if video_segments:
            output_path = f"{base}.mp4"
            create_video_from_blocks(video_segments, audio_paths, output_path)

    except Exception as e:
        print(f"‚ùå Error processing ID {row.get('ID')}: {e}")

# === PARALLEL PROCESS ALL VIDEOS ===
def process_excel_with_effects(df, max_workers=3):
    print(f"üöÄ Processing videos...")
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = [executor.submit(process_single_video, row) for _, row in df.iterrows()]
        for future in as_completed(futures):
            future.result()

# === MAIN FUNCTION ===
def main():
    try:
        health_check()
        df = generate_ideas_via_prompt()
        process_excel_with_effects(df)
        print("üéâ All videos created successfully!")
    except Exception as e:
        print(f"‚ùå Main execution failed: {e}")

if __name__ == "__main__":
    main()
